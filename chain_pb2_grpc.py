# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chain_pb2 as chain__pb2


class ChainStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Probe = channel.unary_unary(
                '/Chain/Probe',
                request_serializer=chain__pb2.ProbeRequest.SerializeToString,
                response_deserializer=chain__pb2.ProbeResponse.FromString,
                )
        self.Processes = channel.unary_unary(
                '/Chain/Processes',
                request_serializer=chain__pb2.ProcessRequest.SerializeToString,
                response_deserializer=chain__pb2.ProcessResponse.FromString,
                )
        self.SetChain = channel.unary_unary(
                '/Chain/SetChain',
                request_serializer=chain__pb2.ChainRequest.SerializeToString,
                response_deserializer=chain__pb2.ChainResponse.FromString,
                )
        self.SendBook = channel.unary_unary(
                '/Chain/SendBook',
                request_serializer=chain__pb2.SendBookRequest.SerializeToString,
                response_deserializer=chain__pb2.SendBookResponse.FromString,
                )
        self.ListBooks = channel.unary_unary(
                '/Chain/ListBooks',
                request_serializer=chain__pb2.ListBooksRequest.SerializeToString,
                response_deserializer=chain__pb2.ListBooksResponse.FromString,
                )
        self.GetBookPrice = channel.unary_unary(
                '/Chain/GetBookPrice',
                request_serializer=chain__pb2.BookRequest.SerializeToString,
                response_deserializer=chain__pb2.BookResponse.FromString,
                )
        self.Timeout = channel.unary_unary(
                '/Chain/Timeout',
                request_serializer=chain__pb2.TimeoutRequest.SerializeToString,
                response_deserializer=chain__pb2.TimeoutResponse.FromString,
                )


class ChainServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Probe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Processes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetChain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendBook(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBooks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBookPrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Timeout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChainServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Probe': grpc.unary_unary_rpc_method_handler(
                    servicer.Probe,
                    request_deserializer=chain__pb2.ProbeRequest.FromString,
                    response_serializer=chain__pb2.ProbeResponse.SerializeToString,
            ),
            'Processes': grpc.unary_unary_rpc_method_handler(
                    servicer.Processes,
                    request_deserializer=chain__pb2.ProcessRequest.FromString,
                    response_serializer=chain__pb2.ProcessResponse.SerializeToString,
            ),
            'SetChain': grpc.unary_unary_rpc_method_handler(
                    servicer.SetChain,
                    request_deserializer=chain__pb2.ChainRequest.FromString,
                    response_serializer=chain__pb2.ChainResponse.SerializeToString,
            ),
            'SendBook': grpc.unary_unary_rpc_method_handler(
                    servicer.SendBook,
                    request_deserializer=chain__pb2.SendBookRequest.FromString,
                    response_serializer=chain__pb2.SendBookResponse.SerializeToString,
            ),
            'ListBooks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBooks,
                    request_deserializer=chain__pb2.ListBooksRequest.FromString,
                    response_serializer=chain__pb2.ListBooksResponse.SerializeToString,
            ),
            'GetBookPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBookPrice,
                    request_deserializer=chain__pb2.BookRequest.FromString,
                    response_serializer=chain__pb2.BookResponse.SerializeToString,
            ),
            'Timeout': grpc.unary_unary_rpc_method_handler(
                    servicer.Timeout,
                    request_deserializer=chain__pb2.TimeoutRequest.FromString,
                    response_serializer=chain__pb2.TimeoutResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Chain', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Chain(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Probe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chain/Probe',
            chain__pb2.ProbeRequest.SerializeToString,
            chain__pb2.ProbeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Processes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chain/Processes',
            chain__pb2.ProcessRequest.SerializeToString,
            chain__pb2.ProcessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetChain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chain/SetChain',
            chain__pb2.ChainRequest.SerializeToString,
            chain__pb2.ChainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendBook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chain/SendBook',
            chain__pb2.SendBookRequest.SerializeToString,
            chain__pb2.SendBookResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBooks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chain/ListBooks',
            chain__pb2.ListBooksRequest.SerializeToString,
            chain__pb2.ListBooksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBookPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chain/GetBookPrice',
            chain__pb2.BookRequest.SerializeToString,
            chain__pb2.BookResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Timeout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chain/Timeout',
            chain__pb2.TimeoutRequest.SerializeToString,
            chain__pb2.TimeoutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
